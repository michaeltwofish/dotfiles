" .vimrc

" use vim settings rather than vi settings
" this must be first, because it changes other options as a side effect
set nocompatible

" Plugins

let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
    silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()

" List your plugins here
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'preservim/tagbar'
Plug 'altercation/vim-colors-solarized'
Plug 'wellle/context.vim'

call plug#end()

" GENERAL SETUP
set nobackup
set formatoptions+=l
set history=50
set number
set listchars=tab:▸\ ,eol:¬,trail:.
set nopaste
set pastetoggle=<F2>
set ruler
set rulerformat=%20(%2*%<%f%=\ %m%r\ %3l\ %c\ %p%%%)
set scrolloff=3 " Keep a little buffer at the edges
set showcmd
set textwidth=0
set visualbell t_vb= " no beeps nor flashes

" Add fuzzy finder to the run time path
set rtp+=/opt/homebrew/bin/fzf
" Map Git file search to ^p
nnoremap <C-p> :GFiles<Cr>

if has("persistent_undo")
    set undodir=~/.vim/undodir
    set undofile
endif

" BEHAVIOUR
set backspace=indent,eol,start " backspace over everything
set splitbelow
set splitright

" SEARCH
set hlsearch
set ignorecase
set incsearch
set smartcase " ignorecase unless search contains an uppercase letter

" TABBING
set expandtab     " uses spaces instead of tabs
set shiftround    " indent to nearest tabstops
set shiftwidth=4  " amount of whitespace to add or remove using > and <
set smarttab      " backspace tabs where appropriate even though they are spaces
set softtabstop=4 " allows us to backspace over 2 spaces at a time
set tabstop=4     " specifies the width of a tab character

if has("autocmd")
    " Enable file type detection.
    " Use the default filetype settings, so that mail gets 'tw' set to 72,
    " 'cindent' is on in C files, etc.
    " Also load indent files, to automatically do language-dependent indenting.
    filetype plugin indent on

    " Delete autocommands that have already been set
    " I found that if I don't have this then repeatedly saving / reloading
    " gets slower and slower because it is doing all the autocmd stuff
    " several times
    au!

    " Set tab to 2 spaces
    au FileType html,css,xml setlocal ts=2 sts=2 sw=2

    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on gvim).
    " Also don't do it when the mark is in the first line, that is the default
    " position when opening a file.
    au BufReadPost *
                \ if line("'\"") > 1 && line("'\"") <= line("$") |
                \ exe "normal! g`\"" |
                \ endif

    au WinEnter * setlocal cursorline
    au WinLeave * setlocal nocursorline

    au bufwritepost .vimrc source ~/.vimrc
    au bufwritepost .vimrc call Pl#Load()
else
    set autoindent " always set autoindenting on
endif

let mapleader = ","

map <leader>m :bprev<CR>
map <leader>. :bnext<CR>

nmap     <silent> <leader>l   :set list!<CR>
nmap     <silent> <leader>n   :set nu!<CR>
nmap              <leader>v   :e $MYVIMRC<CR> " easy .vimrc editing
nmap     <silent> <leader>w   :set wrap!<CR>

nmap <leader>t :TagbarToggle<CR>
nmap <leader>c :ContextToggle<CR>

" Move visual selection around
vmap <C-h> x<BS>P`[v`]
vmap <C-j> xp`[V`]
vmap <C-k> xkP`[V`]
vmap <C-l> x<Space>P`[v`]

" Smart way to move windows
nmap <C-h> <C-W>h
nmap <C-j> <C-W>j
nmap <C-k> <C-W>k
nmap <C-l> <C-W>l

if bufwinnr(1)
    map + :res +1<CR>
    map - :res -1<CR>
    map <leader>+ :vertical:res +1<CR>
    map <leader>- :vertical:res -1<CR>
endif

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
    command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
                \ | wincmd p | diffthis
endif

" plugins

syntax enable
set t_Co=16
" solarized options 
set background=dark
let g:solarized_visibility = "high"
let g:solarized_contrast = "high"
let g:solarized_termcolors = 256
colorscheme solarized

" Supertab completion should use omni-completion
let g:supertabdefaultcompletiontype = "context"
let g:Powerline_colorscheme = 'dangerous'
let g:Powerline_symbols = 'fancy'
set laststatus=2
